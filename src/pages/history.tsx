/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import {
  Card,
  Container,
  Group,
  SimpleGrid,
  Text,
  Pagination,
  Center,
  Badge,
  Select,
} from "@mantine/core";
import { api } from "../utils/api";
import { useSession } from "next-auth/react";
import { Prism } from "@mantine/prism";
import { formatRelative } from "date-fns";
import type { Language } from "./generate_code";
import { useEffect, useState } from "react";
import type { Prompt } from "@prisma/client";

export default function History() {
  const session = useSession();

  const getHistory = api.codeGenerator.getCodeHistory.useQuery();
  const [prompts, setPrompts] = useState<Prompt[]>();
  const [page, setPage] = useState(1);
  const [totalPrompts, setTotalPrompts] = useState(0);
  const [filter, setFilter] = useState("all");

  useEffect(() => {
    const from = (page - 1) * 5;
    const to = from + 5;

    if (getHistory.data) {
      if (filter != "all") {
        setPrompts(
          getHistory.data.filter((v) => v.language == filter).slice(from, to)
        );
        setTotalPrompts(
          getHistory.data.filter((v) => v.language == filter).length
        );
      } else {
        setPrompts(getHistory.data.slice(from, to));
        setTotalPrompts(getHistory.data.length);
      }
    }
  }, [getHistory.data, page, filter]);

  if (getHistory.data?.length == 0)
    return (
      <h1 style={{ textAlign: "center" }}>
        You have not generated any code yet.
      </h1>
    );

  if (session.status === "unauthenticated")
    return (
      <Center>
        <h1>You need to sign in to view your history</h1>
      </Center>
    );

  return (
    <>
      <Container>
        <SimpleGrid cols={1}>
          <Select
            label="Filter Language"
            defaultValue={"all"}
            data={[
              { value: "all", label: "All" },
              { value: "javascript", label: "JavaScript" },
              { value: "python", label: "Python" },
              { value: "go", label: "Go" },
              { value: "cpp", label: "C++" },
            ]}
            onChange={(opt) => {
              if (opt) setFilter(opt);
            }}
          />
          {prompts &&
            prompts.map((generation) => {
              return (
                <Card key={generation.id} withBorder radius="md" p={"md"}>
                  <Badge
                    variant="light"
                    color={
                      generation.language == "python" ||
                      generation.language == "javascript"
                        ? "yellow"
                        : "blue"
                    }
                  >
                    {generation.language}
                  </Badge>
                  <Text weight={500} truncate>
                    {generation.prompt}

                    <Prism
                      withLineNumbers
                      language={generation.language as Language}
                    >
                      {generation.code}
                    </Prism>
                  </Text>

                  <Text size="sm" color="dimmed" lineClamp={4}></Text>

                  <Group position="apart">
                    <Text size="sm" inline sx={{ marginTop: ".4rem" }} truncate>
                      Generated by {session.data?.user.name}{" "}
                      {formatRelative(
                        new Date(generation.createdAt),
                        new Date()
                      )}
                    </Text>
                  </Group>
                </Card>
              );
            })}
        </SimpleGrid>
        {getHistory.data && (Math.ceil(totalPrompts / 5)) >= 2 ? (
          <Center sx={{ marginTop: "0.4rem" }}>
            <Pagination
              page={page}
              onChange={setPage}
              total={Math.ceil(totalPrompts / 5)}
            />
          </Center>
        ) : null}
      </Container>
    </>
  );
}
